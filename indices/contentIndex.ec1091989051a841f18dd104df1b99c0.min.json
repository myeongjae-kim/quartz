{"/":{"title":"🪴 김명재","content":"\n\u003cp style=\"text-align:center\"\u003e\n\u003ca href=\"https://myeongjae.kim\"\u003emyeongjae.kim\u003c/a\u003e\n\u003c/p\u003e\n\n- [[notes/1-메모상자]]\n- [[notes/2-시-우리가-할-일은-웃는-것이다]]\n- [[notes/3-vscode-extensions]]\n- [[notes/3a-kill-port]]\n- [[notes/4-이력서]]\n- [[notes/5-기술]]\n- [[notes/5a-리액트-네이티브-디버깅-도구]]\n- [[notes/5b-bitrise에서-빌드한-앱을-슬랙-메시지-버튼으로-받기]]\n- [[notes/5c-url과-세미콜론]]\n- [[notes/5d-웹에서-한글-줄바꿈]]\n","lastmodified":"2023-07-03T14:35:25.373340534Z","tags":[]},"/_index_head":{"title":"🪴 김명재","content":"\n\u003cp style=\"text-align:center\"\u003e\n\u003ca href=\"https://myeongjae.kim\"\u003emyeongjae.kim\u003c/a\u003e\n\u003c/p\u003e\n\n","lastmodified":"2023-07-03T14:35:25.373340534Z","tags":[]},"/notes/1-%EB%A9%94%EB%AA%A8%EC%83%81%EC%9E%90":{"title":"1. 메모상자","content":"\n## 메모\n\n제텔카스텐은 상향으로 구성된다. 키워드가 먼저 있고 메모를 채우는게 아니라, *메모를 채우다보니 어떤 주제가 이미 상당히 발전해서 개요가 필요한 상태이거나 혹은 개요가 있으면 작은 도움이라도 얻을 수 있는 상태*가 되었기 때문에 인덱스에 추가하는 것이다. 영구 보관 메모들간의 연결에 가장 신경을 많이 써야 한다.\n\n메모를 연결하는 일이 제텔카스텐의 핵심이다. 키워드는 연결된 메모들에서부터 탄생한다. 제텔카스텐의 꽃이 '키워드'라면, '메모 연결'은 밭을 갈고 씨뿌리는 일이다.\n\n\u003e 우리는 링크를 만드는 일이 메모 상자를 유지 관리하는 차원의 허드렛일이 아님을 항상 명심해야 한다. 의미 있는 연결관계를 찾는 작업은 최종 원고를 완성하기 위해 생각하는 과정에서 결정적으로 중요한 역할을 한다. 이 단계는 상징적으로 우리의 내부의 기억을 찾는 대신, 문자 그대로 메모 상자를 살펴보고 연결성을 찾는 매우 구체적인 작업이다. 또한, 실제 메모를 다루기 때문에 무언가가 타당한지 아닌지를 문서로확인할 수 있어서 연결 관계가 없는 곳에서 연결 관계를 상상할 가능성도 적다.\n\n\n## 발췌\n\n\\- 숀케 아렌스, 제텔카스텐, 인간희극, 2021\n\n제텔카스텐의 디지털 버전들에서 메모들을 연결하는 것은 식은죽 먹기보다 더 간단하다. 그런데 아무리 어떤 프로그램이 공동 서지정보 등을 바탕으로 이렇게 저렇게 연결하려고 제안한다 해도, 제대로 교차 참조cross-references하는 작업은 만만치 않은 생각을 요하는 일이자 생각의 발전 과정에서 매우 중요한 부분이다.\n\n루만은 4가지 기본 유형의 교차 참조법을 활용했다[^20-p.173f;82-p.165f] 디지털 버전들에서는 이 가운데 첫 번째와 마지막 유형만 관련 있고, 나머지 두 가지는 종이와 펜을 사용하는 아날로그 버전의 제약을 상쇄하는 용도로만 필요하다. 따라서 디지털 프로그램을 사용한다면 이 두 가지는 신경 쓸 필요가 없다.\n\n1. 첫 번째 유형의 링크는 어떤 주제에 대한 개요를 제공하는 메모들과 연결된다. 이런 메모들은 색인에서 직접 연결된다. 어떤 주제가 이미 상당히 발전해서 개요가 필요한 상태이거나 혹은 개요가 있으면 작은 도움이라도 얻을 수 있는 상태라면, 특정 주제로 진입하는 엔트리 포인트로 대개 이런 메모가 사용된다. 이런 메모에는 특정 주제나 문제와 관련된 다른 메모들과의 링크를 모아둘 수 있는데, 이때 가급적이면 링크된 메모에 무슨 내용이 있는지 짧게 적어두면 좋다(한두 마디나 짧은 문장이면 족하다). 또한 이런 종류의 메모는 생각의 구조를 짜는 데 도움을 주기에, 원고를 발전시키기 전의 중간 단계로 간주하면 된다. 무엇보다도 이런 메모는 메모 상자 안에서 방향을 잃지 않게 도와준다. 여러분도 이런 메모를 써야 할 때가 되면 다 실감하게 될 것이다. 루만은 이런 종류의 엔트리 포인트 메모에 다른 메모와의 링크를 최대 25개까지 기록하기도 했다. 물론 링크는 시간이 지나면서 추가될 수 있으므로, 한꺼번에 이렇게 많이 기록할 필요는 없다. 우리는 이렇게 링크가 추가되는 것만 봐도 그 주제가 얼마나 유기적으로 늘어날 수 있는지 알 수 있다. 어떤 주제와 관련이 있느냐, 없느냐 하는 판단은 우리가 현재 이해하고 있는 바에 따라 달라지며, 매우 진지한 판단이 이루어져야 한다. 아이디어는 그 바탕이 되는 사실이 얼마나 많은가에 따라 그만큼 명확히 규정되기 때문이다. 우리가 어떤 주제와 관련 있다고 보는 관점과 이것을 구조화하는 방법은 시간이 흐르면서 달라진다. 이런 변화는 더욱 적합한 또 다른 주제 구조를 지닌 새로운 메모로 이어질 수 있으며, 그 메모는 이전의 메모에 대한 코멘트로 간주될 수 있다. 감사하게도 이런 순간에도 나머지 모든 메모가 쓸모없게 되지는 않는다. 앞서 언급한 바와 같이, 색인의 엔트리 항목을 이 새 메모로 바꾸거나 추가적으로 옛 메모에 '이제는 새 구조가 더 적합한 것으로 보인다'는 언급만 하면 된다.\n2. 위와 유사하지만 덜 중요한 링크들은 메모 상자의 지엽적, 물리적 무리cluster에 대한 개요를 제공하는 메모들과 관련된다. 이것은 루만처럼 종이와 펜으로 아날로그식 작업을 하는 경우에만 필요하다. 첫 번째 유형의 메모는 메모 상자 속 메모의 위치와 무관하게 어떤 주제에 대한 개요를 제공하는 반면, 이 두 번째 유형의 메모는 물리적으로 가까운 곳에 있는 메모에서 논의되는 모든 주제를 파악하는 실용적인 방법이 된다. 메모들 사이에 메모를 집어넣어 내부적으로 부주제와 부부주제가 가지를 뻗도록 만들면 원래의 사고방식이 다양한 메모들 때문에 방해받는 경우가 종종 있는데 이 두 번째 유형의 메모가 원래의 사고방식을 놓치지 않고 파악하게 해주는 것이다. 물론, 디지털 버전 프로그램으로 작업하는 경우에는 이 문제를 염려할 필요가 없다.\n3. 세 번째 링크들도 마찬가지로 디지털 버전에서는 관련성이 적다. 이 링크들은 현재 메모의 선행 메모를 가리키기도 하고 현재 메모의 후속 메모를 가리키기도 한다. 이 링크들은 물리적으로 가까이 붙어있지 않은 메모들이라도 어떤 메모들끼리 서로 이어지는지 알게 되는 데 의의가 있다.\n4. 가장 일반적인 형태의 참조방식은 단순한 메모 대 메모 링크다. 이 경우에는 두 개의 개별 메모 사이의 적절한 연결 관계를 보여주는 것 이외의 기능은 없다. 관련된 두 메모가 메모 상자 안 어디에 있건, 혹은 다른 맥락 속 어디에 있건 상관없이 이 두 메모를 연결함으로써 놀랍고도 새로운 사고방식이 구축될 수 있다. 이 같은 메모 대 메모 링크는 우리가 안면 있는 사람들과 맺고 있는 사회적 관계상의 \"약한 유대관계\"[^112] 와 비슷하다. 대개 우리가 가장 먼저 찾는 대상은 아니지만, 그래도 우리에게 새롭고 다양한 관점을 제공해주는 경우가 많다는 점에서 그렇다.\n\n이러한 링크 덕분에 우리는 외견상 관계없이 보이는 주제들 사이에서도 놀라운 연결성과 유사성을 발견할 수 있다. 패턴이 당장 눈에 띄지는 않겠지만, 두 주제 사이의 메모 대 메모 링크가 다수 구축되고 나면 그 모습을 서서히 드러내기 시작할 것이다. 루만의 사회 시스템 이론의 주요 특징 중 하나가 매우 다양한 사회분야에서 찾을 수 있는 구조적 패턴의 발견이라는 사실은 그저 우연이 아니다. 예를 들어 루만은 돈, 권력, 사랑, 진리, 정의 같은 다양한 가치들이 어떻게 구조적으로 유사한 문제들을 해결하는 사회적 발명품으로 여겨질 수 있는지를 입증할 수 있었다(이것들은 모두 커뮤니케이션 제의를 수용할 가능성을 높이는 매체로 여겨질 수 있다. 니클라스 루만의 『사회의 사회』 9~12장 참고).[^18] 반면, 미리 생각해 둔 테마와 주제에 따라 모든 것이 깔끔하게 분리된 시스템으로 작업하는 사람은 이 같은 의견을 결코 제시할 수도, 설명할 수도 없다.\n\n한편, 우리는 링크를 만드는 일이 메모 상자를 유지 관리하는 차원의 허드렛일이 아님을 항상 명심해야 한다. 의미 있는 연결관계를 찾는 작업은 최종 원고를 완성하기 위해 생각하는 과정에서 결정적으로 중요한 역할을 한다. 이 단계는 상징적으로 우리의 내부의 기억을 찾는 대신, 문자 그대로 메모 상자를 살펴보고 연결성을 찾는 매우 구체적인 작업이다. 또한, 실제 메모를 다루기 때문에 무언가가 타당한지 아닌지를 문서로확인할 수 있어서 연결 관계가 없는 곳에서 연결 관계를 상상할 가능성도 적다.\n\n이런 연결을 만들어 내는 주체는 다름 아닌 우리 자신이기 때문에, 우리는 메모 상자의 내부 구조를 생각으로 구축할 수 있다. 제한된 기억과는 독립적으로 외부에도 이런 구조를 구축하는 만큼, 우리는 더욱 구조적인 방식으로 생각할 수 있게 될 것이며, 여러 사실들과 심사숙고한 아이디어, 검증 가능한 참고자료로 이루어진 네트워크 안에 우리 아이디어의 뿌리를 내리게 될 것이다. 또한 메모 상자는 많은 정보를 가지고 있는 현실적인 커뮤니케이션 파트너와 같아서 우리가 현실감을 잃지 않게 해준다. 혹시라도 우리가 다소 뜬구름 잡는 아이디어를 추가하려 들면, 메모 상자는 우리가 다음과 같은 사항을 먼저 점검하게끔 만든다. 참고자료가 무엇인가? 기존에 가지고 있는 아이디어나 사실과는 어떻게 연결되는가?","lastmodified":"2023-07-03T14:35:25.373340534Z","tags":[]},"/notes/2-%EC%8B%9C-%EC%9A%B0%EB%A6%AC%EA%B0%80-%ED%95%A0-%EC%9D%BC%EC%9D%80-%EC%9B%83%EB%8A%94-%EA%B2%83%EC%9D%B4%EB%8B%A4":{"title":"2. (시) 우리가 할 일은 웃는 것이다","content":"\n**[우리가 할 일은 웃는 것이다(이승훈)](https://www.personar.kr/music/우리가-할-일은-웃는-것이다이승훈-i**-홍일표/)**\n\n\u003e 웅성거리는 삶 헤매고 떠도는 삶 술에 취해 주정도 하고 실수도 하는 삶이 세계입니다 고상한 영혼 따윈 없죠 형이상학도 없습니다 모두가 언어죠 후회도 언어 기쁨도 언어 모래도 언어 지금 저리는 팔도 언어 어제 들른 카페도 언어 당신도 언어입니다 언어의 한계가 세계의 한계이고 당신의 한계죠 당신의 한계가 세계의 한계입니다 당신은 당신의 눈을 볼 수 없고 당신은 지금 추운 들판, 거리, 마른 나무를 보는 게 아니라 당신의 시야 속에 있습니다 당신의 시야가 세계이고 세계의 한계죠 결국 사유는 미친 짓이죠 무슨 영혼, 진리, 본질 따윈 버리세요 잊으세요 망각하세요 세계와 거리를 두지 마세요 그저 사세요 영혼 따위에 속지 마세요 진리를 찾지 마세요 삶이 그대로 진리입니다 당신의 진리가 있는 게 아니라 당신이 진리죠 오전엔 눈이 오고 오후엔 해가 납니다\n\n유물론 좋아. 현실을 살게 하는 건조한 말이 좋다.","lastmodified":"2023-07-03T14:35:25.373340534Z","tags":[]},"/notes/3-vscode-extensions":{"title":"3. VSCode extensions","content":"\n## Pretty TypeScript Errors\n\n읽기 힘든 타입스크립트 타입 에러를 읽기쉽게 바꿔주는 vscode 플러그인\n\nhttps://marketplace.visualstudio.com/items?itemName=yoavbls.pretty-ts-errors\n![[notes/images/image (18).png]]","lastmodified":"2023-07-03T14:35:25.373340534Z","tags":[]},"/notes/3a-kill-port":{"title":"3a. kill-port","content":"\nhttps://twitter.com/dannypostmaa/status/1647790681568706561?s=46\u0026t=WWPMzoEtNZZ_eqp7T45DPQ\n\n![[notes/images/Ft4g4anaAAAu0U5.jpeg]]","lastmodified":"2023-07-03T14:35:25.373340534Z","tags":[]},"/notes/4-%EC%9D%B4%EB%A0%A5%EC%84%9C":{"title":"4. 이력서","content":"\n## 저는\n\nWIP\n\n## 이력\n\n### 디어코퍼레이션\n\n#### 기간\n\n2022.05.02 ~ 현재\n\n#### 업무\n- 모빌리티서비스팀 풀스택 개발자 (2023.05.01 ~ 현재)\n- 물류팀 테크리드 (2022.06.01 ~ 2023.04.30)\n\t- 화물 주선사 대상 SaaS 개발 (배차 \u0026 정산)\n- 모빌리티서비스팀 프론트엔드 리드 (2022.05.02 ~ 2022.05.31)\n\n#### 기여한 기술력\n\n##### 모빌리티서비스팀 풀스택 개발자 (2023.05.01 ~ 현재)\n\n- 디어 앱 CI/CD 파이프라인 구축\n- 디어 앱 개발 과정에 TDD(Test Driven Development) 도입\n- 동종업계 S사 API의 종단간 암호화 알고리즘과 암호키 추출\n- 전사 VPN 셋업 및 구글 로그인 연동\n- 쿼리를 공유할 수 있는 도구인 [Apache Zeppelin](https://zeppelin.apache.org/)을 도입해서 디어 데이터 분석 인프라를 마련함\n\n##### 물류팀 테크리드 (2022.06.01 ~ 2023.04.30)\n\n화물 주선사 대상 SaaS 개발 (배차 \u0026 정산)\n\n- AWS 인프라를 VPC부터 Terraform으로 설계 및 구축\n- AWS ECS, AWS Fargate를 사용하는 배포환경 구축\n- Kotlin Spring으로 백엔드 API 구현\n- 백엔드 API의 모든 기능에 대한 테스트 작성\n- 배치 성격의 프로그램을 [serverless framework](https://www.serverless.com/)로 작성\n\t- serverless, AWS Lambda, EventBridge\n- 화물 플랫폼들의 API를 분석하고 종단간 암호화 알고리즘과 암호키 추출\n- OLAP(Online Analytical Process) 워크로드를 감당할 수 있는 시스템 도입\n\t- AWS Athena, Apache Zeppelin\n- pnpm workspace를 활용해서 전사 프론트엔드 모노레포 도입 (10개 이상의 웹앱을 모노레포에서 관리)\n- Jira의 Release기능을 활용한 버전관리 프로세스 제안 및 도입\n\t- Jira Automation을 활용해서 릴리즈노트 자동 생성, 슬랙 알림 전송, GitHub에 Release draft 자동생성함\n\n##### 모빌리티서비스팀 프론트엔드 리드 (2022.05.02 ~ 2022.05.31)\n\n- 리액트 네이티브 모노레포 템플릿 작성 (yarn workspace를 활용해서)\n- Bitrise를 도입해서 앱 CI/CD를 구성\n- Trunk Based Development 문화 도입\n\n\n---\n\n### 우아한형제들\n\n#### 기간\n\n2018.10.15 ~ 2022.04.30\n\n#### 업무\n\n- 만화경 백엔드/프론트엔드/추천시스템 개발\n\t- 만화경 팀의 두 번째 개발자로 입사\n- Spring Boot, Spring Data JPA, Spring Web MVC, Spring WebFlux, Spirng Data R2DBC, Spring OAuth2, TypeScript, React, Next.js, Redux, Redux Saga, lerna\n\n#### 기여한 기술력\n\n- 백엔드 애플리케이션 아키텍처 설계 및 구현 (적극적인 TDD 활용)\n\t- 도메인 영역에 세부사항이 침투하지 않도록 [Gradle 멀티모듈](https://techblog.woowahan.com/2637/) 구조 적용\n\t- 도메인 모듈을 API와 배치 애플리케이션에서 공용으로 쓸 수 있도록 개선\n- 백오피스 CMS 프론트엔드 설계 및 구현 (Next.js, Redux, Redux Saga)\n\t- 내부용, 작가용 어드민을 하나의 저장소에서 관리하기 위해 lerna로 모노레포 구조 적용\n- 추천시스템 구현 (AWS Personalize, AWS StepFunctions, Apache Airflow)\n- gif resize가 가능한 image-api 설계 및 구현 (sharp)\n- 백엔드 API의 언어를 자바에서 코틀린으로 전환하는 프로젝트를 제안하고 수행\n\t- 코틀린 스터디그룹을 운영해서 구성원들과 함께 기술을 학습함. 책 [Atomic Kotlin](https://www.atomickotlin.com) 학습\n\t- 테스트 코드부터 먼저 코틀린으로 변환하고, 변환하는 과정에서 kotest, mockk등을 적용함\n\t- 테스트 코드의 변환이 완료된 이후부터 새로 작성하는 main코드들도 코틀린으로 작성함\n\t- 자바로 작성한 부분에 요구사항이 발생하면 코틀린으로 변환 후 요구사항을 반영함\n- 개인별 추천 데이터에 기반한 푸시알림 자동화 (Apache Airflow, Braze)\n\n#### 성과\n\n- **3년만에 T1에서 T3직급까지 두 번 승진**\n- 만화경 웹툰 플랫폼의 비즈니스 요구사항을 만족하는 백엔드 API와 백오피스 CMS 프론트엔드 구현\n\n---\n\n### 개인 홈페이지 운영\n\nhttps://myeongjae.kim\n\n#### 기간\n\n2018.08.13 ~ 현재\n\n#### 목적\n\n학습용 프로젝트입니다. 기술적으로 관심이 가는 기술을 현업에 적용해보기 전에 실험해보는 테스트베드가 주요 용도이며, 평소에 드는 생각이나 회사 기술블로그에 기고한 글을 아카이빙하는 목적으로도 운영하고 있습니다.\n\n#### 학습했던 기술\n\nAWS VPC, AWS EC2, AWS ECS, Vuejs, Go, React, Next.js, TypeORM, InversifyJS, Spring Boot, Docker, Strapi, Heroku\n\n---\n\n### The University of Austin at Texas (미국 텍사스)\n\n#### 기간\n2018.04 ~ 2018.05\n\n#### 업무\n\n- curl library를 활용한 데이터 전송 프로그램 구현\n- C++, libcurl, sftp, expect (linux cli), crontab\n\n#### 기여한 기술력\n\n[UT Austin 간호대학](https://nursing.utexas.edu)에서 사용하던 프로그램이 유지보수가 되고있지 않던 상황에서, 기존의 소스코드를 받아 프로그램이 제대로 작동하도록 구현을 마무리 했습니다.\n\n프로그램은 A서버에서 환자의 기록을 받아와 B,C 서버로 보냅니다. A서버에서 받은 문자열 데이터를 B,C서버가 요구하는 포맷에 맞게 처리하고 전송합니다.\n\n프로젝트를 넘겨받았을 때는 전임자가 프로그램을 설계하고 curl library를 활용하는 클래스까지만 구현한 상태였습니다. 설계 문서를 보고 A서버에 request를 보내서 데이터를 받아오는 부분, 받아온 문자열 데이터를 처리하는 부분, 받은 데이터를 B,C서버로 전송하는 부분을 구현했습니다.\n\nC++로 작성한 프로그램에서는 A서버의 데이터를 받아와 B,C 서버가 요구하는 포맷의 csv데이터를 생성합니다. 데이터 생성이 완료되면 expect용 스크립트를 생성하고 실행합니다. expect 스크립트에서는 sftp로 csv파일을 B,C 서버에 전송합니다.\n\n아래는 expect 스크립트의 템플릿입니다. `{{ examples }}` 부분이 실제 값으로 교체됩니다.\n\n```\n#!/usr/bin/expect\n\nspawn sftp -i {{ Alere_HK_File }} -c aes128-cbc {{ Alere_User }}@{{ Alere_Host }}\nexpect \"Enter password: \"\nsend \"{{ Alere_Pass }}\\\\\\\\n\"\nexpect \"sftp\u003e\"\nsend \"cd {{ Alere_Path }}\\\\\\\\n\"\nexpect \"sftp\u003e\"\nsend \"put {{ Alere_File }}\\\\\\\\n\"\nexpect \"sftp\u003e\"\nsend \"exit\\\\\\\\n\"\ninteract\n```\n\n#### 성과\n\n- 목표했던 프로그램을 완성했습니다.\n- libcurl 라이브러리의 활용법을 배웠습니다.\n- expect를 통해 CLI 상호작용을 자동화하는 법을 배웠습니다.\n- crontab을 활용해서 프로세스를 정해진 시간에 자동으로 실행하는 법을 배웠습니다.\n\n---\n\n### Sandman Media Inc. (캐나다 벤쿠버)\n\nhttps://www.sandmanmedia.com\n\n#### 기간\n2017.01 ~ 2017.02\n\n#### 업무\n- Joomla(CMS) 기반 웹페이지 개발\n- HTML, CSS, PHP\n\n#### 성과\n\nCEO에게 추천서를 받고 Fast learner라고 인정을 받았습니다. [추천서보기](https://cdn.myeongjae.kim/blog/2023/05/김명재_추천서_Sandeep_Reference_Letter.pdf)\n\n---\n\n## 기고\n\n- [(2023.04.17) 모든 IT 스타트업에서 꼭 작성해야 하는 프론트엔드 단위 테스트가 있다? (로깅, 단위 테스트, 그리고 의존성 주입) - 디어코퍼레이션 기술블로그](https://blog.deering.co/frontend-unit-test-you-must-write/) \n- [(2022.11.15) 스타트업 개발 생산성 높이기: (2) 숨어있는 비용을 찾아 없애자 - 디어코퍼레이션 기술블로그](https://blog.deering.co/cost-reducing/)\n- [(2022.11.15) 스타트업 개발 생산성 높이기 (1): Shape Up - 디어코퍼레이션 기술블로그](https://blog.deering.co/shape-up/)\n- [(2022.05.18) 개발자의 일이관지一以貫之 - 디어코퍼레이션 기술블로그](https://blog.deering.co/abstract-engineering/)\n- [(2022.04.30) git branch 이름과 hook으로 commit message 컨벤션 강제하기 - 디어코퍼레이션 기술블로그](https://blog.deering.co/commit-convention/)\n- [(2022.04.05) '우아한형제들 구성원들의 책 추천!' 영상 제작에 참여 - 우아한형제들 유튜브](https://youtu.be/J1lkYT0g2bM?t=74)\n- [(2020.11.04) AWS DNA 1기 수상 및 인터뷰 진행](http://blog.creation.net/channy-cloud-clinic-ep23)\n- [(2019.06.12) Spring Boot에서 Repository로 DynamoDB 조작하기 (2) – Gradle을 활용해 실행 \u0026 테스팅 환경 구축 - 우아한형제들 기술블로그](https://techblog.woowahan.com/2634/)\n- [(2019.06.05) Spring Boot에서 Repository로 DynamoDB 조작하기 (1) – 설정부터 실행까지 - 우아한형제들 기술블로그](https://techblog.woowahan.com/2633/)\n\n## 자격증\n\n- (2021.06.02) 정보처리기사\n- [(2020.09.14) AWS Certified Solutions Architect – Associate](https://www.credly.com/badges/732992e0-7ae1-4b46-b3b1-35949f8030ac)\n\n## 학력\n\n- 한양대학교 컴퓨터전공 (2012.02 ~ 2020.08)","lastmodified":"2023-07-03T14:35:25.373340534Z","tags":[]},"/notes/5-%EA%B8%B0%EC%88%A0":{"title":"5. 기술","content":"\n5번 항목에서는 기술과 관련된 내용을 다룹니다.","lastmodified":"2023-07-03T14:35:25.373340534Z","tags":[]},"/notes/5a-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EB%84%A4%EC%9D%B4%ED%8B%B0%EB%B8%8C-%EB%94%94%EB%B2%84%EA%B9%85-%EB%8F%84%EA%B5%AC":{"title":"5a. 리액트 네이티브 디버깅 도구","content":"\n1. [react-native-debugger](https://github.com/jhen0409/react-native-debugger)\n2. [Flipper](https://fbflipper.com)\n","lastmodified":"2023-07-03T14:35:25.373340534Z","tags":[]},"/notes/5b-bitrise%EC%97%90%EC%84%9C-%EB%B9%8C%EB%93%9C%ED%95%9C-%EC%95%B1%EC%9D%84-%EC%8A%AC%EB%9E%99-%EB%A9%94%EC%8B%9C%EC%A7%80-%EB%B2%84%ED%8A%BC%EC%9C%BC%EB%A1%9C-%EB%B0%9B%EA%B8%B0":{"title":"5b. Bitrise에서 빌드한 앱을 슬랙 메시지 버튼으로 받기","content":"\n별거 아니지만 설정하는데 깨나 시간을 써서 아까워서 기록해놓는다.\n\n```yml\n    - script@1:\n        inputs:\n        - content: |-\n            #!/usr/bin/env bash\n\n            LIST=(${BITRISE_PUBLIC_INSTALL_PAGE_URL_MAP//|/ })\n            INSTALL_PAGE_0=${LIST[0]//=\u003e/|}\n            INSTALL_PAGE_1=${LIST[1]//=\u003e/|}\n            INSTALL_PAGE_2=${LIST[2]//=\u003e/|}\n            INSTALL_PAGE_3=${LIST[3]//=\u003e/|}\n\n            envman add --key INSTALL_PAGE_BUTTON_0 --value \"$INSTALL_PAGE_0\"\n            envman add --key INSTALL_PAGE_BUTTON_1 --value \"$INSTALL_PAGE_1\"\n            envman add --key INSTALL_PAGE_BUTTON_2 --value \"$INSTALL_PAGE_2\"\n            envman add --key INSTALL_PAGE_BUTTON_3 --value \"$INSTALL_PAGE_3\"\n    - slack@3:\n        inputs:\n        - channel: \"$SLACK_CHANNEL\"\n        - pretext: \"*(staging)App Build Succeeded!* Build Number: $BITRISE_BUILD_NUMBER\"\n        - buttons: |-\n            ${INSTALL_PAGE_BUTTON_0}\n            ${INSTALL_PAGE_BUTTON_1}\n            ${INSTALL_PAGE_BUTTON_2}\n            ${INSTALL_PAGE_BUTTON_3}\n            View Build|${BITRISE_BUILD_URL}\n            View App|${BITRISE_APP_URL}\n        - webhook_url_on_error: \"$SLACK_API_TOKEN\"\n        - api_token: \"$SLACK_API_TOKEN\"\n        is_always_run: false\n    - slack@3:\n        inputs:\n        - channel: \"$SLACK_CHANNEL\"\n        - pretext: \"*(staging)App Build Failed!* Build Number: $BITRISE_BUILD_NUMBER\"\n        - color: \"#a63636\"\n        - api_token: \"$SLACK_API_TOKEN\"\n        is_always_run: true\n        run_if: \".IsBuildFailed\"\n```","lastmodified":"2023-07-03T14:35:25.373340534Z","tags":[]},"/notes/5c-url%EA%B3%BC-%EC%84%B8%EB%AF%B8%EC%BD%9C%EB%A1%A0":{"title":"5c. URL과 세미콜론","content":"\n세미콜론(;)은 URL에서 사용할 수 있는 문자다. 하지만 path parameter를 구분하는데 사용하고, query parameter에서는 일반 문자로 취급해야 한다.\n\n\u003e In other words, `?foo=bar;baz` means the parameter `foo` will have the value `bar;baz`; whereas `?foo=bar;baz=sna` should result in `foo` being `bar;baz=sna` (although technically illegal since the second `=` should be escaped to `%3D`).\n\u003e\n\u003e - https://stackoverflow.com/a/40768572\n\n예전에 쿼리 파라미터를 구분할 때 쓰는 암퍼센드(\u0026)를 세미콜론(;)으로 대체하려는 시도가 있었지만, 지금은 obsolete되었고 쿼리 파라미터를 구분할 때는 암퍼센드(\u0026)만 사용해야 한다.\n\n하지만 path parameter를 구분하는데 사용하는 세미콜론(;)은 여전히 유효하다. 예를 들어서 `http://www.blah.com/some/crazy/path.html;param1=foo;param2=bar`\n\n### 참고\n- https://stackoverflow.com/a/40768572\n- https://stackoverflow.com/a/18830337","lastmodified":"2023-07-03T14:35:25.373340534Z","tags":[]},"/notes/5d-%EC%9B%B9%EC%97%90%EC%84%9C-%ED%95%9C%EA%B8%80-%EC%A4%84%EB%B0%94%EA%BF%88":{"title":"5d. 웹에서 한글 줄바꿈","content":"\nhttps://www.w3.org/TR/css-text-3/#word-break-property\n\n```css\nword-break: keep-all;\ntext-align: left;\n```\n\n단어 끊어지게 줄바꾸지 말고, 양쪽정렬 하지 말고 좌측정렬로 하자\n\n- [미움 받는 왼끝맞춤에 대한 변호](https://fdsctxt.oopy.io/74cfe0a0-d836-44a6-973a-cf7f722ac880) ([아카이브](https://web.archive.org/web/20220109131143/https://fdsctxt.oopy.io/74cfe0a0-d836-44a6-973a-cf7f722ac880))","lastmodified":"2023-07-03T14:35:25.373340534Z","tags":[]}}